diff --git a/src/lib.rs b/src/lib.rs
index fe435cb..730913f 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -54,6 +54,7 @@
 //! ```
 
 #![warn(missing_docs)]
+#![feature(io_const_error, io_const_error_internals, specialization)]
 
 use std::error;
 use std::fmt;
@@ -344,21 +345,11 @@ pub struct WavSpec {
     /// A common value is 16 bits per sample, which is used for CD audio.
     pub bits_per_sample: u16,
 
-    /// Whether the wav's samples are float or integer values.
-    pub sample_format: SampleFormat,
-}
-
-/// Specifies properties of the audio data, as well as the layout of the stream.
-#[derive(Clone, Copy)]
-pub struct WavSpecEx {
-    /// The normal information about the audio data.
-    ///
-    /// Bits per sample here is the number of _used_ bits per sample, not the
-    /// number of bits used to _store_ a sample.
-    pub spec: WavSpec,
-
     /// The number of bytes used to store a sample.
     pub bytes_per_sample: u16,
+
+    /// Whether the wav's samples are float or integer values.
+    pub sample_format: SampleFormat,
 }
 
 /// The error type for operations on `WavReader` and `WavWriter`.
@@ -367,7 +358,7 @@ pub enum Error {
     /// An IO error occured in the underlying reader or writer.
     IoError(io::Error),
     /// Ill-formed WAVE data was encountered.
-    FormatError(&'static str),
+    FormatError(&'static io::SimpleMessage),
     /// The sample has more bits than the destination type.
     ///
     /// When iterating using the `samples` iterator, this means that the
@@ -397,7 +388,7 @@ impl fmt::Display for Error {
             Error::IoError(ref err) => err.fmt(formatter),
             Error::FormatError(reason) => {
                 try!(formatter.write_str("Ill-formed WAVE file: "));
-                formatter.write_str(reason)
+                formatter.write_str(reason.message)
             }
             Error::TooWide => {
                 formatter.write_str("The sample has more bits than the destination type.")
@@ -420,7 +411,7 @@ impl error::Error for Error {
     fn description(&self) -> &str {
         match *self {
             Error::IoError(ref err) => err.description(),
-            Error::FormatError(reason) => reason,
+            Error::FormatError(reason) => reason.message,
             Error::TooWide => "the sample has more bits than the destination type",
             Error::UnfinishedSample => "the number of samples written is not a multiple of the number of channels",
             Error::Unsupported => "the wave format of the file is not supported",
diff --git a/src/read.rs b/src/read.rs
index 9c9a9a4..c48db40 100644
--- a/src/read.rs
+++ b/src/read.rs
@@ -15,19 +15,12 @@ use std::fs;
 use std::io;
 use std::marker;
 use std::path;
-use super::{Error, Result, Sample, SampleFormat, WavSpec, WavSpecEx};
+use super::{Error, Result, Sample, SampleFormat, WavSpec};
 
 /// Extends the functionality of `io::Read` with additional methods.
 ///
 /// The methods may be used on any type that implements `io::Read`.
 pub trait ReadExt: io::Read {
-    /// Reads as many bytes as `buf` is long.
-    ///
-    /// This may issue multiple `read` calls internally. An error is returned
-    /// if `read` read 0 bytes before the buffer is full.
-    //  TODO: There is an RFC proposing a method like this for the standard library.
-    fn read_into(&mut self, buf: &mut [u8]) -> io::Result<()>;
-
     /// Reads 4 bytes and returns them in an array.
     fn read_4_bytes(&mut self) -> io::Result<[u8; 4]>;
 
@@ -75,21 +68,7 @@ impl<R> ReadExt for R
     where R: io::Read
 {
     #[inline(always)]
-    fn read_into(&mut self, buf: &mut [u8]) -> io::Result<()> {
-        let mut n = 0;
-        while n < buf.len() {
-            let progress = try!(self.read(&mut buf[n..]));
-            if progress > 0 {
-                n += progress;
-            } else {
-                return Err(io::Error::new(io::ErrorKind::Other, "Failed to read enough bytes."));
-            }
-        }
-        Ok(())
-    }
-
-    #[inline(always)]
-    fn skip_bytes(&mut self, n: usize) -> io::Result<()> {
+    default fn skip_bytes(&mut self, n: usize) -> io::Result<()> {
         // Read from the input in chunks of 1024 bytes at a time, and discard
         // the result. 1024 is a tradeoff between doing a lot of calls, and
         // using too much stack space. This method is not in a hot path, so it
@@ -102,7 +81,7 @@ impl<R> ReadExt for R
             if progress > 0 {
                 n_read += progress;
             } else {
-                return Err(io::Error::new(io::ErrorKind::Other, "Failed to read enough bytes."));
+                return Err(io::const_error!(io::ErrorKind::UnexpectedEof, "Failed to read enough bytes."));
             }
         }
         Ok(())
@@ -111,7 +90,7 @@ impl<R> ReadExt for R
     #[inline(always)]
     fn read_4_bytes(&mut self) -> io::Result<[u8; 4]> {
         let mut buf = [0_u8; 4];
-        try!(self.read_into(&mut buf[..]));
+        try!(self.read_exact(&mut buf[..]));
         Ok(buf)
     }
 
@@ -123,7 +102,7 @@ impl<R> ReadExt for R
     #[inline(always)]
     fn read_u8(&mut self) -> io::Result<u8> {
         let mut buf = [0u8; 1];
-        try!(self.read_into(&mut buf));
+        try!(self.read_exact(&mut buf));
         Ok(buf[0])
     }
 
@@ -135,7 +114,7 @@ impl<R> ReadExt for R
     #[inline(always)]
     fn read_le_u16(&mut self) -> io::Result<u16> {
         let mut buf = [0u8; 2];
-        try!(self.read_into(&mut buf));
+        try!(self.read_exact(&mut buf));
         Ok((buf[1] as u16) << 8 | (buf[0] as u16))
     }
 
@@ -168,7 +147,7 @@ impl<R> ReadExt for R
     #[inline(always)]
     fn read_le_u24(&mut self) -> io::Result<u32> {
         let mut buf = [0u8; 3];
-        try!(self.read_into(&mut buf));
+        try!(self.read_exact(&mut buf));
         Ok((buf[2] as u32) << 16 | (buf[1] as u32) << 8 | (buf[0] as u32))
     }
 
@@ -180,7 +159,7 @@ impl<R> ReadExt for R
     #[inline(always)]
     fn read_le_u32(&mut self) -> io::Result<u32> {
         let mut buf = [0u8; 4];
-        try!(self.read_into(&mut buf));
+        try!(self.read_exact(&mut buf));
         Ok((buf[3] as u32) << 24 | (buf[2] as u32) << 16 |
            (buf[1] as u32) << 8  | (buf[0] as u32) << 0)
     }
@@ -188,11 +167,25 @@ impl<R> ReadExt for R
     #[inline(always)]
     fn read_le_f32(&mut self) -> io::Result<f32> {
         let mut buf = [0u8; 4];
-        try!(self.read_into(&mut buf));
+        try!(self.read_exact(&mut buf));
         Ok(f32::from_le_bytes(buf))
     }
 }
 
+impl<R> ReadExt for R
+where
+    R: io::Read + io::Seek
+{
+    #[inline(always)]
+    fn skip_bytes(&mut self, n: usize) -> io::Result<()> {
+        use std::convert::TryInto;
+        match n.try_into() {
+            Ok(n) => self.seek_relative(n),
+            Err(_) => Err(io::const_error!(io::ErrorKind::InvalidInput, "Too more bytes to skip")),
+        }
+    }
+}
+
 /// The different chunks that a WAVE file can contain.
 enum ChunkKind {
     Fmt,
@@ -218,9 +211,6 @@ pub struct WavReader<R> {
     /// Specification of the file as found in the fmt chunk.
     spec: WavSpec,
 
-    /// The number of bytes used to store a sample in the stream.
-    bytes_per_sample: u16,
-
     /// The number of samples in the data chunk.
     ///
     /// The data chunk is limited to a 4 GiB length because its header has a
@@ -270,14 +260,14 @@ pub fn read_wave_header<R: io::Read>(reader: &mut R) -> Result<u64> {
     // the compiler smart enough to avoid the heap allocation anyway? I
     // would not expect it to be.
     if b"RIFF" != &try!(reader.read_4_bytes())[..] {
-        return Err(Error::FormatError("no RIFF tag found"));
+        return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "no RIFF tag found" }));
     }
 
     let file_len = try!(reader.read_le_u32());
 
     // Next four bytes indicate the file type, which should be WAVE.
     if b"WAVE" != &try!(reader.read_4_bytes())[..] {
-        return Err(Error::FormatError("no WAVE tag found"));
+        return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "no WAVE tag found" }));
     }
 
     // The stored file length does not include the "RIFF" magic and 4-byte
@@ -290,7 +280,7 @@ pub fn read_wave_header<R: io::Read>(reader: &mut R) -> Result<u64> {
 /// Returns the information from the fmt chunk and the length of the data
 /// chunk in bytes. Afterwards, the reader will be positioned at the first
 /// content byte of the data chunk.
-pub fn read_until_data<R: io::Read>(mut reader: R) -> Result<(WavSpecEx, u32)> {
+pub fn read_until_data<R: io::Read>(mut reader: R) -> Result<(WavSpec, u32)> {
     let mut spec_opt = None;
 
     loop {
@@ -319,7 +309,7 @@ pub fn read_until_data<R: io::Read>(mut reader: R) -> Result<(WavSpecEx, u32)> {
                 if let Some(spec) = spec_opt {
                     return Ok((spec, header.len));
                 } else {
-                    return Err(Error::FormatError("missing fmt chunk"));
+                    return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "missing fmt chunk" }));
                 }
             }
             ChunkKind::Unknown => {
@@ -338,7 +328,7 @@ impl<R> WavReader<R>
     /// Attempts to read an 8-byte chunk header.
     fn read_chunk_header(reader: &mut R) -> Result<ChunkHeader> {
         let mut kind_str = [0; 4];
-        try!(reader.read_into(&mut kind_str));
+        try!(reader.read_exact(&mut kind_str));
         let len = try!(reader.read_le_u32());
 
         let kind = match &kind_str[..] {
@@ -352,13 +342,13 @@ impl<R> WavReader<R>
     }
 
     /// Reads the fmt chunk of the file, returns the information it provides.
-    fn read_fmt_chunk(reader: &mut R, chunk_len: u32) -> Result<WavSpecEx> {
+    fn read_fmt_chunk(reader: &mut R, chunk_len: u32) -> Result<WavSpec> {
         // A minimum chunk length of at least 16 is assumed. Note: actually,
         // the first 14 bytes contain enough information to fully specify the
         // file. I have not encountered a file with a 14-byte fmt section
         // though. If you ever encounter such file, please contact me.
         if chunk_len < 16 {
-            return Err(Error::FormatError("invalid fmt chunk size"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "invalid fmt chunk size" }));
         }
 
         // Read the WAVEFORMAT struct, as defined at
@@ -406,36 +396,41 @@ impl<R> WavReader<R>
         let bits_per_sample = try!(reader.read_le_u16());
 
         if n_channels == 0 {
-            return Err(Error::FormatError("file contains zero channels"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "file contains zero channels" }));
         }
 
         let bytes_per_sample = block_align / n_channels;
         // We allow bits_per_sample to be less than bytes_per_sample so that
         // we can support things such as 24 bit samples in 4 byte containers.
         if Some(bits_per_sample) > bytes_per_sample.checked_mul(8) {
-            return Err(Error::FormatError("sample bits exceeds size of sample"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "sample bits exceeds size of sample" }));
         }
 
         // This field is redundant, and may be ignored. We do validate it to
         // fail early for ill-formed files.
         if Some(n_bytes_per_sec) != (block_align as u32).checked_mul(n_samples_per_sec) {
-            return Err(Error::FormatError("inconsistent fmt chunk"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "inconsistent fmt chunk" }));
+        }
+
+        if Some(block_align) != bytes_per_sample.checked_mul(n_channels) {
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "redundant bytes" }));
         }
 
         // The bits per sample for a WAVEFORMAT struct is the number of bits
         // used to store a sample. Therefore, it must be a multiple of 8.
         if bits_per_sample % 8 != 0 {
-            return Err(Error::FormatError("bits per sample is not a multiple of 8"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "bits per sample is not a multiple of 8" }));
         }
 
         if bits_per_sample == 0 {
-            return Err(Error::FormatError("bits per sample is 0"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "bits per sample is 0" }));
         }
 
         let mut spec = WavSpec {
             channels: n_channels,
             sample_rate: n_samples_per_sec,
             bits_per_sample: bits_per_sample,
+            bytes_per_sample: bytes_per_sample,
             sample_format: SampleFormat::Int,
         };
 
@@ -456,10 +451,7 @@ impl<R> WavReader<R>
             _ => return Err(Error::Unsupported),
         };
 
-        Ok(WavSpecEx {
-            spec: spec,
-            bytes_per_sample: bytes_per_sample,
-        })
+        Ok(spec)
     }
 
     fn read_wave_format_pcm(mut reader: R, chunk_len: u32, spec: &WavSpec) -> Result<()> {
@@ -471,7 +463,7 @@ impl<R> WavReader<R>
             // Other sizes are unexpected, but such files do occur in the wild,
             // and reading these files is still possible, so we allow this.
             40 => true,
-            _ => return Err(Error::FormatError("unexpected fmt chunk size")),
+            _ => return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "unexpected fmt chunk size" })),
         };
 
         if is_wave_format_ex {
@@ -491,7 +483,7 @@ impl<R> WavReader<R>
                 8 => {}
                 16 => {}
                 24 => {}
-                _ => return Err(Error::FormatError("bits per sample is not 8 or 16")),
+                _ => return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "bits per sample is not 8 or 16" })),
             }
         }
 
@@ -508,7 +500,7 @@ impl<R> WavReader<R>
         let is_wave_format_ex = chunk_len == 18;
 
         if !is_wave_format_ex && chunk_len != 16 {
-            return Err(Error::FormatError("unexpected fmt chunk size"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "unexpected fmt chunk size" }));
         }
 
         if is_wave_format_ex {
@@ -516,7 +508,7 @@ impl<R> WavReader<R>
             // be no extra data, so `cbSize` should be 0.
             let cb_size = try!(reader.read_le_u16());
             if cb_size != 0 {
-                return Err(Error::FormatError("unexpected WAVEFORMATEX size"));
+                return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "unexpected WAVEFORMATEX size" }));
             }
         }
 
@@ -527,7 +519,7 @@ impl<R> WavReader<R>
         // Note that some applications support 64 bits per sample. This is
         // not yet supported by hound.
         if spec.bits_per_sample != 32 {
-            return Err(Error::FormatError("bits per sample is not 32"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "bits per sample is not 32" }));
         }
 
         spec.sample_format = SampleFormat::Float;
@@ -539,7 +531,7 @@ impl<R> WavReader<R>
         // field, and `cbSize` itself must be at least 22, so the chunk length
         // must be at least 40.
         if chunk_len < 40 {
-            return Err(Error::FormatError("unexpected fmt chunk size"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "unexpected fmt chunk size" }));
         }
 
         // `cbSize` is the last field of the WAVEFORMATEX struct.
@@ -548,7 +540,7 @@ impl<R> WavReader<R>
         // `cbSize` must be at least 22, but in this case we assume that it is
         // 22, because we would not know how to handle extra data anyway.
         if cb_size != 22 {
-            return Err(Error::FormatError("unexpected WAVEFORMATEXTENSIBLE size"));
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "unexpected WAVEFORMATEXTENSIBLE size" }));
         }
 
         // What follows is the rest of the `WAVEFORMATEXTENSIBLE` struct, as
@@ -568,7 +560,7 @@ impl<R> WavReader<R>
         let valid_bits_per_sample = try!(reader.read_le_u16());
         let _channel_mask = try!(reader.read_le_u32()); // Not used for now.
         let mut subformat = [0u8; 16];
-        try!(reader.read_into(&mut subformat));
+        try!(reader.read_exact(&mut subformat));
 
         // Several GUIDS are defined. At the moment, only the following are supported:
         //
@@ -595,30 +587,28 @@ impl<R> WavReader<R>
     /// demand.
     pub fn new(mut reader: R) -> Result<WavReader<R>> {
         try!(read_wave_header(&mut reader));
-        let (spec_ex, data_len) = try!(read_until_data(&mut reader));
+        let (spec, data_len) = try!(read_until_data(&mut reader));
 
-        let num_samples = data_len / spec_ex.bytes_per_sample as u32;
+        let num_samples = data_len / spec.bytes_per_sample as u32;
 
         // It could be that num_samples * bytes_per_sample < data_len.
         // If data_len is not a multiple of bytes_per_sample, there is some
         // trailing data. Either somebody is playing some steganography game,
         // but more likely something is very wrong, and we should refuse to
         // decode the file, as it is invalid.
-        if num_samples * spec_ex.bytes_per_sample as u32 != data_len {
-            let msg = "data chunk length is not a multiple of sample size";
-            return Err(Error::FormatError(msg));
+        if num_samples * spec.bytes_per_sample as u32 != data_len {
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "data chunk length is not a multiple of sample size" }));
         }
 
         // The number of samples must be a multiple of the number of channels,
         // otherwise the last inter-channel sample would not have data for all
         // channels.
-        if num_samples % spec_ex.spec.channels as u32 != 0 {
-            return Err(Error::FormatError("invalid data chunk length"));
+        if num_samples % spec.channels as u32 != 0 {
+            return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "invalid data chunk length" }));
         }
 
         let wav_reader = WavReader {
-            spec: spec_ex.spec,
-            bytes_per_sample: spec_ex.bytes_per_sample,
+            spec: spec,
             num_samples: num_samples,
             samples_read: 0,
             reader: reader,
@@ -702,10 +692,9 @@ impl<R> WavReader<R>
     pub fn seek(&mut self, time: u32) -> io::Result<()>
         where R: io::Seek,
     {
-        let bytes_per_sample = self.spec.bits_per_sample / 8;
         let sample_position = time * self.spec.channels as u32;
         let offset_samples = sample_position as i64 - self.samples_read as i64;
-        let offset_bytes = offset_samples * bytes_per_sample as i64;
+        let offset_bytes = offset_samples * self.spec.bytes_per_sample as i64;
         try!(self.reader.seek(io::SeekFrom::Current(offset_bytes)));
         self.samples_read = sample_position;
         Ok(())
@@ -732,7 +721,7 @@ fn iter_next<R, S>(reader: &mut WavReader<R>) -> Option<Result<S>>
         reader.samples_read += 1;
         let sample = Sample::read(&mut reader.reader,
                                   reader.spec.sample_format,
-                                  reader.bytes_per_sample,
+                                  reader.spec.bytes_per_sample,
                                   reader.spec.bits_per_sample);
         Some(sample.map_err(Error::from))
     } else {
diff --git a/src/write.rs b/src/write.rs
index 585206a..7e6de66 100644
--- a/src/write.rs
+++ b/src/write.rs
@@ -16,7 +16,7 @@ use std::mem;
 use std::io::{Seek, Write};
 use std::mem::MaybeUninit;
 use std::path;
-use super::{Error, Result, Sample, SampleFormat, WavSpec, WavSpecEx};
+use super::{Error, Result, Sample, SampleFormat, WavSpec};
 use ::read;
 
 /// Extends the functionality of `io::Write` with additional methods.
@@ -163,9 +163,6 @@ pub struct WavWriter<W>
     /// Specifies properties of the audio data.
     spec: WavSpec,
 
-    /// The (container) bytes per sample. This is the bit rate / 8 rounded up.
-    bytes_per_sample: u16,
-
     /// The writer that will be written to.
     writer: W,
 
@@ -207,26 +204,6 @@ impl<W> WavWriter<W>
     /// This writes parts of the header immediately, hence a `Result` is
     /// returned.
     pub fn new(writer: W, spec: WavSpec) -> Result<WavWriter<W>> {
-        let spec_ex = WavSpecEx {
-            spec: spec,
-            bytes_per_sample: (spec.bits_per_sample + 7) / 8,
-        };
-        WavWriter::new_with_spec_ex(writer, spec_ex)
-    }
-
-
-    /// Creates a writer that writes the WAVE format to the underlying writer.
-    ///
-    /// The underlying writer is assumed to be at offset 0. `WavWriter` employs
-    /// *no* buffering internally. It is recommended to wrap the writer in a
-    /// `BufWriter` to avoid too many `write` calls. The `create()` constructor
-    /// does this automatically.
-    ///
-    /// This writes parts of the header immediately, hence a `Result` is
-    /// returned.
-    pub fn new_with_spec_ex(writer: W, spec_ex: WavSpecEx) -> Result<WavWriter<W>> {
-        let spec = spec_ex.spec;
-
         // Write the older PCMWAVEFORMAT structure if possible, because it is
         // more widely supported. For more than two channels or more than 16
         // bits per sample, the newer WAVEFORMATEXTENSIBLE is required. See also
@@ -239,7 +216,6 @@ impl<W> WavWriter<W>
 
         let mut writer = WavWriter {
             spec: spec,
-            bytes_per_sample: spec_ex.bytes_per_sample,
             writer: writer,
             data_bytes_written: 0,
             sample_writer_buffer: Vec::new(),
@@ -322,7 +298,7 @@ impl<W> WavWriter<W>
         // The field nSamplesPerSec.
         try!(buffer.write_le_u32(spec.sample_rate));
         let bytes_per_sec = spec.sample_rate
-                          * self.bytes_per_sample as u32
+                          * spec.bytes_per_sample as u32
                           * spec.channels as u32;
 
         // The field nAvgBytesPerSec;
@@ -390,7 +366,7 @@ impl<W> WavWriter<W>
 
         // The field wBitsPerSample. This is actually the size of the
         // container, so this is a multiple of 8.
-        try!(buffer.write_le_u16(self.bytes_per_sample as u16 * 8));
+        try!(buffer.write_le_u16(self.spec.bytes_per_sample as u16 * 8));
         // The field cbSize, the number of remaining bytes in the struct.
         try!(buffer.write_le_u16(22));
         // The field wValidBitsPerSample, the real number of bits per sample.
@@ -430,9 +406,9 @@ impl<W> WavWriter<W>
         try!(sample.write_padded(
             &mut self.writer,
             self.spec.bits_per_sample,
-            self.bytes_per_sample,
+            self.spec.bytes_per_sample,
         ));
-        self.data_bytes_written += self.bytes_per_sample as u32;
+        self.data_bytes_written += self.spec.bytes_per_sample as u32;
         Ok(())
     }
 
@@ -499,7 +475,7 @@ impl<W> WavWriter<W>
         // Signal error if the last sample was not finished, but do so after
         // everything has been written, so that no data is lost, even though
         // the file is now ill-formed.
-        if (self.data_bytes_written / self.bytes_per_sample as u32)
+        if (self.data_bytes_written / self.spec.bytes_per_sample as u32)
             % self.spec.channels as u32 != 0 {
             Err(Error::UnfinishedSample)
         } else {
@@ -564,7 +540,7 @@ impl<W> WavWriter<W>
     /// in units of samples. The duration in seconds can be obtained by
     /// dividing this number by the sample rate.
     pub fn duration(&self) -> u32 {
-        self.data_bytes_written / (self.bytes_per_sample as u32 * self.spec.channels as u32)
+        self.data_bytes_written / (self.spec.bytes_per_sample as u32 * self.spec.channels as u32)
     }
 
     /// Returns the number of samples in the file written so far.
@@ -572,7 +548,7 @@ impl<W> WavWriter<W>
     /// The length of the file is its duration (in samples) times the number of
     /// channels.
     pub fn len(&self) -> u32 {
-        self.data_bytes_written / self.bytes_per_sample as u32
+        self.data_bytes_written / self.spec.bytes_per_sample as u32
     }
 }
 
@@ -592,8 +568,8 @@ impl<W> Drop for WavWriter<W>
 /// Reads the relevant parts of the header required to support append.
 ///
 /// Returns (spec_ex, data_len, data_len_offset).
-fn read_append<W: io::Read + io::Seek>(mut reader: &mut W) -> Result<(WavSpecEx, u32, u32)> {
-    let (spec_ex, data_len) = {
+fn read_append<W: io::Read + io::Seek>(mut reader: &mut W) -> Result<(WavSpec, u32, u32)> {
+    let (spec, data_len) = {
         try!(read::read_wave_header(&mut reader));
         try!(read::read_until_data(&mut reader))
     };
@@ -602,19 +578,17 @@ fn read_append<W: io::Read + io::Seek>(mut reader: &mut W) -> Result<(WavSpecEx,
     // later.
     let data_len_offset = try!(reader.seek(io::SeekFrom::Current(0))) as u32 - 4;
 
-    let spec = spec_ex.spec;
-    let num_samples = data_len / spec_ex.bytes_per_sample as u32;
+    let num_samples = data_len / spec.bytes_per_sample as u32;
 
     // There must not be trailing bytes in the data chunk, otherwise the
     // bytes we write will be off.
-    if num_samples * spec_ex.bytes_per_sample as u32 != data_len {
-        let msg = "data chunk length is not a multiple of sample size";
-        return Err(Error::FormatError(msg));
+    if num_samples * spec.bytes_per_sample as u32 != data_len {
+        return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "data chunk length is not a multiple of sample size" }));
     }
 
     // Hound cannot read or write other bit depths than those, so rather
     // than refusing to write later, fail early.
-    let supported = match (spec_ex.bytes_per_sample, spec.bits_per_sample) {
+    let supported = match (spec.bytes_per_sample, spec.bits_per_sample) {
         (1, 8) => true,
         (2, 16) => true,
         (3, 24) => true,
@@ -629,11 +603,11 @@ fn read_append<W: io::Read + io::Seek>(mut reader: &mut W) -> Result<(WavSpecEx,
     // The number of samples must be a multiple of the number of channels,
     // otherwise the last inter-channel sample would not have data for all
     // channels.
-    if num_samples % spec_ex.spec.channels as u32 != 0 {
-        return Err(Error::FormatError("invalid data chunk length"));
+    if num_samples % spec.channels as u32 != 0 {
+        return Err(Error::FormatError(&io::SimpleMessage { kind: io::ErrorKind::InvalidData, message: "invalid data chunk length" }));
     }
 
-    Ok((spec_ex, data_len, data_len_offset))
+    Ok((spec, data_len, data_len_offset))
 }
 
 impl WavWriter<io::BufWriter<fs::File>> {
@@ -664,7 +638,7 @@ impl WavWriter<io::BufWriter<fs::File>> {
 
         // Read the header using a buffered reader.
         let mut buf_reader = io::BufReader::new(file);
-        let (spec_ex, data_len, data_len_offset) = try!(read_append(&mut buf_reader));
+        let (spec, data_len, data_len_offset) = try!(read_append(&mut buf_reader));
         let mut file = buf_reader.into_inner();
 
         // Seek to the data position, and from now on, write using a buffered
@@ -673,8 +647,7 @@ impl WavWriter<io::BufWriter<fs::File>> {
         let buf_writer = io::BufWriter::new(file);
 
         let writer = WavWriter {
-            spec: spec_ex.spec,
-            bytes_per_sample: spec_ex.bytes_per_sample,
+            spec: spec,
             writer: buf_writer,
             data_bytes_written: data_len,
             sample_writer_buffer: Vec::new(),
@@ -700,11 +673,10 @@ impl<W> WavWriter<W> where W: io::Read + io::Write + io::Seek {
     /// is not an issue, because Hound never writes a fact chunk. For all the
     /// formats that Hound can write, the fact chunk is redundant.
     pub fn new_append(mut writer: W) -> Result<WavWriter<W>> {
-        let (spec_ex, data_len, data_len_offset) = try!(read_append(&mut writer));
+        let (spec, data_len, data_len_offset) = try!(read_append(&mut writer));
         try!(writer.seek(io::SeekFrom::Current(data_len as i64)));
         let writer = WavWriter {
-            spec: spec_ex.spec,
-            bytes_per_sample: spec_ex.bytes_per_sample,
+            spec: spec,
             writer: writer,
             data_bytes_written: data_len,
             sample_writer_buffer: Vec::new(),
@@ -884,17 +856,15 @@ fn s24_wav_write() {
     use std::io::Read;
     let mut buffer = io::Cursor::new(Vec::new());
 
-    let spec = WavSpecEx {
-        spec: WavSpec {
-            channels: 2,
-            sample_rate: 48000,
-            bits_per_sample: 24,
-            sample_format: SampleFormat::Int,
-        },
+    let spec = WavSpec {
+        channels: 2,
+        sample_rate: 48000,
+        bits_per_sample: 24,
         bytes_per_sample: 4,
+        sample_format: SampleFormat::Int,
     };
     {
-        let mut writer = WavWriter::new_with_spec_ex(&mut buffer, spec).unwrap();
+        let mut writer = WavWriter::new(&mut buffer, spec).unwrap();
         assert!(writer.write_sample(-96_i32).is_ok());
         assert!(writer.write_sample(23_052_i32).is_ok());
         assert!(writer.write_sample(8_388_607_i32).is_ok());
